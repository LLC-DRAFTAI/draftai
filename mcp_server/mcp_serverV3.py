#!/usr/bin/env python3
"""
MCP Server (FreeCAD) ‚Äî —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤ (—Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤) –ø–æ stubs.json.

–ü–æ–≤–µ–¥–µ–Ω–∏–µ:
- –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ FreeCAD (–≤ CI –Ω–µ –ø–∞–¥–∞–µ—Ç),
- –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç –≤ FreeCAD (exec(...) –≤ Python Console) ‚Äî –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ,
- –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç/–∑–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ: start_server(), run_in_background().
"""

from __future__ import annotations
import os
import sys
import socket
import json
import threading
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤–æ–∑–º–æ–∂–Ω–æ caller –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç —É—Ä–æ–≤–µ–Ω—å)
logging.basicConfig(format="%(asctime)s %(levelname)s: %(message)s", level=logging.INFO)

# ----- BEGIN INSERT: FreeCAD logging handler -----

class FreeCADLogHandler(logging.Handler):
    """logging.Handler, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FreeCAD Report View / Python Console."""
    def emit(self, record: logging.LogRecord) -> None:
        try:
            msg = self.format(record)
            # –ï—Å–ª–∏ FreeCAD –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ –µ–≥–æ Console API.
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º PrintError –¥–ª—è –æ—à–∏–±–æ–∫ –∏ PrintMessage –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ.
            if 'FreeCAD' in globals() and globals().get('FreeCAD') is not None:
                try:
                    if record.levelno >= logging.ERROR:
                        FreeCAD.Console.PrintError(msg + "\n")
                    else:
                        FreeCAD.Console.PrintMessage(msg + "\n")
                    return
                except Exception:
                    # –µ—Å–ª–∏ FreeCAD –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ Console.* –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî fallback –Ω–∞ stdout
                    pass
            # fallback ‚Äî –≤—ã–≤–æ–¥ –≤ stderr/stdout
            if record.levelno >= logging.ERROR:
                print(msg, file=sys.stderr)
            else:
                print(msg)
        except Exception:
            # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ª–æ–≥–≥–µ—Ä –Ω–µ –±—É–¥–µ—Ç –ª–æ–º–∞—Ç—å—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ handler-–µ
            pass

def attach_freecad_logging(level: int = logging.DEBUG) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç FreeCADLogHandler –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ª–æ–≥–≥–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.
    –í—ã–∑—ã–≤–∞—Ç—å **–ø–æ—Å–ª–µ** —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ FreeCAD.
    """
    root = logging.getLogger()
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç handler
    for h in root.handlers:
        if isinstance(h, FreeCADLogHandler):
            return
    fh = FreeCADLogHandler()
    fh.setLevel(level)
    fmt = logging.Formatter("%(asctime)s %(levelname)s: %(message)s")
    fh.setFormatter(fmt)
    root.addHandler(fh)
# ----- END INSERT -----

# –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ª–æ–∂–∏—Ç—å –ø—É—Ç—å –∫ FreeCAD –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è FREECAD_PATH
_freecad_env = os.environ.get("FREECAD_PATH")
if _freecad_env:
    # –µ—Å–ª–∏ –ø—É—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –±–∏–Ω–∞—Ä–Ω—É—é –ø–∞–ø–∫—É, –¥–æ–±–∞–≤–∏–º –µ—ë
    if os.path.exists(_freecad_env) and _freecad_env not in sys.path:
        sys.path.insert(0, _freecad_env)
        logging.debug("–î–æ–±–∞–≤–ª–µ–Ω FREECAD_PATH –≤ sys.path: %s", _freecad_env)

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å FreeCAD (—Ä–∞–±–æ—á–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–Ω—É—Ç—Ä–∏ FreeCAD –∏–ª–∏ –µ—Å–ª–∏ FREECAD_PATH –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω)
try:
    import FreeCAD  # type: ignore
    import Part     # type: ignore
    # –ø–æ–¥–∫–ª—é—á–∞–µ–º –ª–æ–≥-—Ö–µ–Ω–¥–ª–µ—Ä, —á—Ç–æ–±—ã logging —à—ë–ª –≤ Report View
    attach_freecad_logging()
    logging.debug("FreeCAD logging handler attached")
except Exception:
    FreeCAD = None
    Part = None
    logging.warning("‚ö† FreeCAD –Ω–µ –Ω–∞–π–¥–µ–Ω. MCP —Å–µ—Ä–≤–µ—Ä –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ FreeCAD.")

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
HOST = "127.0.0.1"
PORT = 9090

def create_radiator(doc, stub: dict):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–¥–∏–∞—Ç–æ—Ä –≤ FreeCAD –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ –¥–∞–Ω–Ω—ã–º stub."""
    if FreeCAD is None:
        logging.error("FreeCAD –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–∏—Ç–∏–≤.")
        return None

    coords = stub.get("coordinates", [0, 0, 0])
    try:
        x, y, z = [float(c) * 1000 for c in coords]  # –º–µ—Ç—Ä—ã -> –º–º
    except Exception:
        logging.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ coordinates –≤ stub, –∏—Å–ø–æ–ª—å–∑—É—é [0,0,0]")
        x, y, z = 0.0, 0.0, 0.0

    length = float(stub.get("length", 0.2)) * 1000
    width  = float(stub.get("width", 0.06)) * 1000
    height = float(stub.get("height", 0.01)) * 1000

    rtype = stub.get("radiator_type", "box")

    try:
        if rtype == "cylinder":
            obj = doc.addObject("Part::Cylinder", f"Radiator_{stub.get('id','')}")
            obj.Radius = width / 2
            obj.Height = height
            obj.Placement.Base = FreeCAD.Vector(x, y, z - height / 2)
        else:
            obj = doc.addObject("Part::Box", f"Radiator_{stub.get('id','')}")
            obj.Length = length
            obj.Width  = width
            obj.Height = height
            obj.Placement.Base = FreeCAD.Vector(
                x - length / 2,
                y - width / 2,
                z - height / 2
            )
        try:
            obj.ViewObject.ShapeColor = (1.0, 1.0, 0.0)
        except Exception:
            # –í headless/–±–µ–∑ GUI ViewObject –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            pass
        logging.info("‚úÖ –†–∞–¥–∏–∞—Ç–æ—Ä %s -> XYZ=(%.1f, %.1f, %.1f) –º–º", stub.get("id","?"), x, y, z)
        return obj
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–∏—Ç–∏–≤–∞: %s", e)
        return None

def handle_client(conn: socket.socket, addr):
    logging.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: %s", addr)
    buffer = ""
    try:
        while True:
            data = conn.recv(4096).decode("utf-8")
            if not data:
                break
            buffer += data
            # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ newline
            while "\n" in buffer:
                msg, buffer = buffer.split("\n", 1)
                try:
                    stubs = json.loads(msg)
                except Exception as e:
                    logging.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: %s", e)
                    continue

                if FreeCAD is None:
                    logging.error("‚ùå FreeCAD –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–ª—å–∑—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å stubs.")
                    continue

                doc = getattr(FreeCAD, "ActiveDocument", None)
                if doc is None:
                    logging.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ FreeCAD. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ GUI.")
                    continue

                for stub in stubs:
                    create_radiator(doc, stub)

                try:
                    doc.recompute()
                except Exception:
                    logging.debug("recompute() –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
                logging.info("üì¶ –†–∞–∑–º–µ—â–µ–Ω–æ %d —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤", len(stubs))
    finally:
        try:
            conn.close()
        except Exception:
            pass

def start_server() -> None:
    """–ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞; –µ—Å–ª–∏ FreeCAD –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç."""
    if FreeCAD is None:
        logging.error("‚ùå FreeCAD –Ω–µ –Ω–∞–π–¥–µ–Ω. MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –≤ —ç—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
        return

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind((HOST, PORT))
        s.listen()
        logging.info("üöÄ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ %s:%s", HOST, PORT)
        try:
            while True:
                conn, addr = s.accept()
                threading.Thread(target=handle_client, args=(conn, addr), daemon=True).start()
        except KeyboardInterrupt:
            logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ (KeyboardInterrupt).")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –≤ TCP-—Å–µ—Ä–≤–µ—Ä–µ: %s", e)

def run_in_background() -> bool:
    """
    –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ (daemon).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω –∏ FreeCAD –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ False.
    """
    if FreeCAD is None:
        logging.error("‚ùå FreeCAD –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ.")
        return False

    t = threading.Thread(target=start_server, daemon=True)
    t.start()
    logging.info("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ (daemon thread).")
    return True


# --- –ê–≤—Ç–æ-—Å—Ç–∞—Ä—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä exec(...) –≤ FreeCAD Python Console) ---
if __name__ == "__main__":
    # –ï—Å–ª–∏ FreeCAD –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –≤—ã–≤–æ–¥–∏–º –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–µ –ø–∞–¥–∞—è
    if FreeCAD is None:
        logging.error("‚ö† FreeCAD –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏. MCP —Å–µ—Ä–≤–µ—Ä –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ FreeCAD.")
        logging.error("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞:")
        logging.error("  - –í FreeCAD Python Console:")
        logging.error("      exec(open(r'C:\\path\\to\\mcp_serverV3.py', encoding='utf-8').read())")
        logging.error("  - –ò–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º python —Å —É–∫–∞–∑–∞–Ω–∏–µ–º FREECAD_PATH (PowerShell –ø—Ä–∏–º–µ—Ä):")
        logging.error(r"      $env:FREECAD_PATH='C:\Program Files\FreeCAD 0.21\bin'")
        logging.error(r"      python C:\path\to\mcp_serverV3.py")
    else:
        # –ü–æ–ø—ã—Ç–∫–∞ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (—Å–æ–∑–¥–∞–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç)
        try:
            if getattr(FreeCAD, "ActiveDocument", None) is None:
                FreeCAD.newDocument("MCP_doc")
                logging.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π FreeCAD –¥–æ–∫—É–º–µ–Ω—Ç 'MCP_doc' –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–∞.")
        except Exception:
            logging.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (–≤–æ–∑–º–æ–∂–Ω–æ headless/–±–µ–∑ GUI).")

        # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ (daemon). –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–æ–±—â–∏–º –∏ –ø–æ–∫–∞–∂–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.
        try:
            ok = run_in_background()
            if ok:
                logging.info("–ê–≤—Ç–æ-—Å—Ç–∞—Ä—Ç: MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ.")
            else:
                logging.error("–ê–≤—Ç–æ-—Å—Ç–∞—Ä—Ç: MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ FreeCAD –æ–∫—Ä—É–∂–µ–Ω–∏–µ.")
        except Exception as e:
            logging.exception("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ MCP: %s", e)
